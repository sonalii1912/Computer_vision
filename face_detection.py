# -*- coding: utf-8 -*-
"""Face_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MBdym9SbSDdTWguD0S4WW_uJMMFkcvZk
"""

import tensorflow as tf
from keras import layers, models
from sklearn.datasets import fetch_olivetti_faces
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# from keras.src import dtensor
data = fetch_olivetti_faces(shuffle=True,random_state=20)
data

X_train, X_test, y_train, y_test = train_test_split(data.images, data.target, test_size=0.2, random_state=42)
X_train = X_train.reshape((-1, 64, 64, 1))
X_test = X_test.reshape((-1, 64, 64, 1))

label_encoder = LabelEncoder()
label_encoder = LabelEncoder()
y_train = label_encoder.fit_transform(y_train)
y_test = label_encoder.transform(y_test)

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(len(label_encoder.classes_), activation='softmax')
])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f'Test accuracy: {test_accuracy * 100:.2f}%')

import numpy as np
import matplotlib.pyplot as plt

# Choose a random index from the test set
index = np.random.randint(0, len(X_test))

# Get the face image and actual label
test_face = X_test[index].reshape((1, 64, 64, 1))
actual_label = y_test[index]

# Make a prediction using the trained model
predicted_probs = model.predict(test_face)
predicted_label = np.argmax(predicted_probs)

# Decode the labels using the LabelEncoder
actual_label = label_encoder.inverse_transform([actual_label])[0]
predicted_label = label_encoder.inverse_transform([predicted_label])[0]

# Display the actual and predicted labels
print(f"Actual Label: {actual_label}")
print(f"Predicted Label: {predicted_label}")

# Display the face image
plt.imshow(test_face.reshape((64, 64)), cmap='gray')
plt.title('Test Face')
plt.show()